# Licensed to the Apache Software Foundation (ASF) under one or more
# contributor license agreements.  See the NOTICE file distributed with
# this work for additional information regarding copyright ownership.
# The ASF licenses this file to You under the Apache License, Version 2.0
# (the "License"); you may not use this file except in compliance with
# the License.  You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

setup:
  env: kind
  file: ../../../../../base/kind.yaml
  timeout: 20m
  init-system-environment: ../../../../../base/env
  kind:
    import-images:
      - apache/skywalking-rover:latest
      - test/offcpu-c:test
    expose-ports:
      - namespace: istio-system
        resource: service/skywalking-ui
        port: 80
  steps:
    - name: set PATH
      command: export PATH=/tmp/skywalking-infra-e2e/bin:$PATH
    - name: install yq
      command: bash test/e2e/base/scripts/prepare/setup-e2e-shell/install.sh yq
    - name: install swctl
      command: bash test/e2e/base/scripts/prepare/setup-e2e-shell/install.sh swctl
    - name: Install SkyWalking
      command: |
        kubectl create namespace istio-system
        helm -n istio-system install skywalking \
          oci://ghcr.io/apache/skywalking-helm/skywalking-helm \
          --version "0.0.0-${SW_KUBERNETES_COMMIT_SHA}" \
          --set fullnameOverride=skywalking \
          --set elasticsearch.replicas=1 \
          --set elasticsearch.minimumMasterNodes=1 \
          --set oap.replicas=1 \
          --set ui.image.repository=ghcr.io/apache/skywalking/ui \
          --set ui.image.tag=${SW_OAP_COMMIT} \
          --set oap.image.tag=${SW_OAP_COMMIT} \
          --set oap.image.repository=ghcr.io/apache/skywalking/oap \
          --set oap.storageType=elasticsearch \
          -f test/e2e/base/kubernetes-values.yaml
      wait:
        - namespace: istio-system
          resource: deployments/skywalking-oap
          for: condition=available
    - name: Deploy services
      command: |
        export IMAGE_NAME=test/offcpu-c:test
        envsubst < test/e2e/cases/profiling/task/offcpu/service.yaml | kubectl apply -f -
        envsubst < test/e2e/cases/profiling/task/offcpu/rover.yaml | kubectl apply -f -
      wait:
        - namespace: default
          resource: pod
          for: condition=Ready

verify:
  # verify with retry strategy
  retry:
    # max retry count
    count: 20
    # the interval between two retries, in millisecond.
    interval: 10s
  cases:
    - includes:
        - ../profiling-cases.yaml
    - query: |
        taskid=$(swctl --base-url=http://${service_skywalking_ui_host}:${service_skywalking_ui_80}/graphql --display yaml profiling ebpf list --service-name file |yq e '.[0].taskid' -)
        scheduleid=$(swctl --base-url=http://${service_skywalking_ui_host}:${service_skywalking_ui_80}/graphql --display yaml profiling ebpf schedules --task-id=$taskid |yq e '.[0].scheduleid' -);
        start=$(swctl --base-url=http://${service_skywalking_ui_host}:${service_skywalking_ui_80}/graphql --display yaml profiling ebpf schedules --task-id=$taskid | yq e '.[0].starttime' -)
        end=$(swctl --base-url=http://${service_skywalking_ui_host}:${service_skywalking_ui_80}/graphql --display yaml profiling ebpf schedules --task-id=$taskid | yq e '.[0].endtime' -)
        swctl --base-url=http://${service_skywalking_ui_host}:${service_skywalking_ui_80}/graphql --display yaml profiling ebpf analysis --schedule-id=$scheduleid --time-ranges=$start-$end
      expected: profiling-analysis.yml