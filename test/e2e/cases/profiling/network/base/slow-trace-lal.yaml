# Licensed to the Apache Software Foundation (ASF) under one or more
# contributor license agreements.  See the NOTICE file distributed with
# this work for additional information regarding copyright ownership.
# The ASF licenses this file to You under the Apache License, Version 2.0
# (the "License"); you may not use this file except in compliance with
# the License.  You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

rules:
  - name: network-profiling-slow-trace
    layer: OS_LINUX
    dsl: |
      filter {
        json{
        }
        extractor{
          if (tag("LOG_KIND") == "NET_PROFILING_SAMPLED_TRACE") {
            sampledTrace {
              latency parsed.latency as Long
              uri ((parsed.trace_provider as String) + "-" + (parsed.uri as String))
              reason parsed.reason as String

              if (parsed.client_process.process_id as String != "") {
               processId parsed.client_process.process_id as String
              } else if (parsed.client_process.local as Boolean
                  || (parsed.client_process.address as String).split(":")[0].endsWith('.1')
                  || (parsed.client_process.address as String).split(":")[1] == "53") {
                processId ProcessRegistry.generateVirtualLocalProcess(parsed.service as String, parsed.serviceInstance as String) as String
              } else {
                processId ProcessRegistry.generateVirtualProcess(parsed.service as String, parsed.serviceInstance as String, 'UNKNOWN_REMOTE') as String
              }

              if (parsed.server_process.process_id as String != "") {
                destProcessId parsed.server_process.process_id as String
              } else if (parsed.server_process.local as Boolean
                  || (parsed.server_process.address as String).split(":")[0].endsWith('.1')
                  || (parsed.server_process.address as String).split(":")[1] == "53") {
                destProcessId ProcessRegistry.generateVirtualLocalProcess(parsed.service as String, parsed.serviceInstance as String) as String
              } else {
                destProcessId ProcessRegistry.generateVirtualProcess(parsed.service as String, parsed.serviceInstance as String, 'UNKNOWN_REMOTE') as String
              }

              detectPoint parsed.detect_point as String

              if (parsed.component as String == "http" && parsed.ssl as Boolean) {
                componentId 129
              } else if (parsed.component as String == "http") {
                componentId 49
              } else if (parsed.ssl as Boolean) {
                componentId 130
              } else {
                componentId 110
              }
            }
          }
        }
      }